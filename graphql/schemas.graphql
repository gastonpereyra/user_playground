""" Datos del Usuario """
type User {
  id: Int
  userName: String
  email: String
  """ Encriptado """
  password: String
  """ 0 = Usuario, 1= Moderador, 2=Admin """
  role: Int
  createdAt: String
  updatedAt: String
}
""" Datos necesarios para Crear/Actualizar un Usuario """
input UserInput {
  userName: String
  email: String
  password: String
}

""" Roles posibles de Modificar """
enum Role {
  USER
  MOD
}

type AuthUser {
  token: String!
  userName: String
}

type Query {
  """ Obtener todos los Usuarios, Solo estando loggeado """
  getUsers: [User]
  """ Obtener un Usuario, Solo estando loggeado, si no lo encuentra devuelve nulo """
  getUser(id: ID!): User
  """ Obtener un Usuario, Solo estando loggeado """
  getUserByName(userName: String!): User
  """ Datos del Usuario loggeado """
  me: User
  """ Chequea si esta habilitado el nombre de Usuario """
  isUserName(userName: String): Boolean
  """ Chequea si existe el mail """
  isEmail(email: String): Boolean
}

type Mutation {
  """ Loggearse """
  logIn(userName: String!, password: String!): AuthUser
  """ Registrarse """
  signIn(input: UserInput!): AuthUser
  """ Actualizar Usuario, debe estar Loggeado """
  updateUser(input: UserInput!): User
  """ Admin Cambia Roles """
  changeRole(userId: ID!, role: Role!): User
  """ Admin Borra Usuarios """
  deleteUser(id: ID!): User
}